# Station2290 Optimized Nginx Configuration
# High-performance, secure, and production-ready configuration
# Configuration Engineer: Hive Mind Swarm

user nginx;

# CPU and Worker Configuration
# Auto-detect CPU cores for optimal performance
worker_processes auto;
worker_cpu_affinity auto;
worker_rlimit_nofile 65535;
worker_priority -5;

# Error Logging
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Load dynamic modules (if available)
# load_module modules/ngx_http_brotli_filter_module.so;
# load_module modules/ngx_http_brotli_static_module.so;

events {
    # High-performance event model
    use epoll;
    worker_connections 8192;
    multi_accept on;
    accept_mutex off;
}

http {
    # Basic Settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    charset utf-8;
    
    # Enhanced Logging Format with performance metrics
    log_format enhanced '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       'rt=$request_time uct="$upstream_connect_time" '
                       'uht="$upstream_header_time" urt="$upstream_response_time" '
                       'cs=$upstream_cache_status';
    
    log_format json_combined escape=json
    '{'
        '"time_local":"$time_local",'
        '"remote_addr":"$remote_addr",'
        '"remote_user":"$remote_user",'
        '"request":"$request",'
        '"status": "$status",'
        '"body_bytes_sent":"$body_bytes_sent",'
        '"request_time":"$request_time",'
        '"http_referrer":"$http_referer",'
        '"http_user_agent":"$http_user_agent",'
        '"upstream_addr":"$upstream_addr",'
        '"upstream_status":"$upstream_status",'
        '"upstream_response_time":"$upstream_response_time",'
        '"upstream_cache_status":"$upstream_cache_status"'
    '}';
    
    # Access Logs with buffering for performance
    access_log /var/log/nginx/access.log enhanced buffer=64k flush=5s;
    
    # Performance Optimizations
    sendfile on;
    sendfile_max_chunk 1m;
    tcp_nopush on;
    tcp_nodelay on;
    directio 4m;
    directio_alignment 4k;
    
    # Keepalive Optimizations
    keepalive_timeout 75s;
    keepalive_requests 1000;
    reset_timedout_connection on;
    
    # Hash Tables Optimization
    types_hash_max_size 4096;
    types_hash_bucket_size 64;
    server_names_hash_bucket_size 128;
    server_names_hash_max_size 4096;
    variables_hash_max_size 2048;
    variables_hash_bucket_size 128;
    
    # Hide server information
    server_tokens off;
    more_clear_headers Server;
    
    # Client Settings
    client_max_body_size 100M;
    client_body_buffer_size 256k;
    client_header_buffer_size 8k;
    large_client_header_buffers 8 64k;
    client_body_timeout 60s;
    client_header_timeout 60s;
    send_timeout 60s;
    
    # Enable open file cache for better performance
    open_file_cache max=10000 inactive=60s;
    open_file_cache_valid 60s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;
    
    # Gzip Compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_min_length 256;
    gzip_http_version 1.1;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        application/rdf+xml
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/font-woff
        application/font-woff2
        image/svg+xml
        image/x-icon
        font/opentype;
    
    # Brotli Compression (if module available)
    brotli on;
    brotli_comp_level 6;
    brotli_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        application/rdf+xml
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/font-woff
        application/font-woff2
        image/svg+xml
        image/x-icon
        font/opentype;
    
    # Enhanced Rate Limiting
    limit_req_zone $binary_remote_addr zone=api:20m rate=30r/s;
    limit_req_zone $binary_remote_addr zone=general:20m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=bot:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=3r/s;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=2r/m;
    limit_req_zone $binary_remote_addr zone=strict:10m rate=1r/s;
    
    # Advanced rate limiting by URI
    map $uri $limit_key {
        default $binary_remote_addr;
        ~^/api/auth $binary_remote_addr$uri;
        ~^/api/upload $binary_remote_addr$uri;
    }
    limit_req_zone $limit_key zone=uri_limit:20m rate=10r/s;
    
    # Connection Limiting
    limit_conn_zone $binary_remote_addr zone=perip:10m;
    limit_conn_zone $server_name zone=perserver:10m;
    
    # Request limiting status pages
    limit_req_status 429;
    limit_conn_status 429;
    
    # Geo-based access control (example)
    geo $blocked_country {
        default 0;
        # Add country codes to block if needed
        # 1.2.3.0/24 1;
    }
    
    # Map for WebSocket upgrade
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
    
    # Real IP detection from various sources
    set_real_ip_from 10.0.0.0/8;
    set_real_ip_from 172.16.0.0/12;
    set_real_ip_from 192.168.0.0/16;
    set_real_ip_from 169.254.0.0/16;
    set_real_ip_from 127.0.0.0/8;
    set_real_ip_from ::1/128;
    set_real_ip_from fc00::/7;
    set_real_ip_from fe80::/10;
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;
    
    # Security Headers (Global)
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    add_header Content-Security-Policy "default-src 'self' https:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https:; style-src 'self' 'unsafe-inline' https:; img-src 'self' data: https:; font-src 'self' data: https:; connect-src 'self' https: wss:; media-src 'self' https:; object-src 'none'; frame-ancestors 'self'; base-uri 'self'; form-action 'self';" always;
    
    # SSL Configuration (Modern + Intermediate compatibility)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_buffer_size 4k;
    ssl_early_data on;
    
    # OCSP Settings
    resolver 8.8.8.8 8.8.4.4 1.1.1.1 valid=300s;
    resolver_timeout 5s;
    
    # Enhanced Proxy Cache Configuration
    proxy_cache_path /var/cache/nginx/app levels=1:2 keys_zone=app_cache:100m max_size=2g 
                     inactive=60m use_temp_path=off;
    proxy_cache_path /var/cache/nginx/static levels=1:2 keys_zone=static_cache:50m max_size=1g 
                     inactive=7d use_temp_path=off;
    proxy_cache_path /var/cache/nginx/api levels=1:2 keys_zone=api_cache:20m max_size=200m 
                     inactive=10m use_temp_path=off;
    
    # Proxy Settings Optimization
    proxy_temp_path /tmp/nginx_proxy;
    proxy_connect_timeout 30s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    proxy_buffer_size 16k;
    proxy_buffers 32 16k;
    proxy_busy_buffers_size 64k;
    proxy_max_temp_file_size 1024m;
    proxy_temp_file_write_size 64k;
    proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
    proxy_next_upstream_tries 3;
    proxy_next_upstream_timeout 10s;
    proxy_cache_lock on;
    proxy_cache_lock_age 5s;
    proxy_cache_lock_timeout 5s;
    proxy_cache_revalidate on;
    proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
    proxy_cache_background_update on;
    proxy_ignore_headers Cache-Control Expires;
    
    # FastCGI Cache (if using PHP)
    fastcgi_cache_path /var/cache/nginx/fastcgi levels=1:2 keys_zone=FASTCGI:100m inactive=60m;
    fastcgi_cache_key "$scheme$request_method$host$request_uri";
    fastcgi_cache_use_stale error timeout invalid_header http_500;
    fastcgi_ignore_headers Cache-Control Expires Set-Cookie;
    
    # Upstream configurations with enhanced health checks
    upstream api_backend {
        least_conn;
        server 85.193.95.44:3000 max_fails=3 fail_timeout=30s weight=1;
        
        # Connection pooling
        keepalive 64;
        keepalive_requests 1000;
        keepalive_timeout 60s;
        
        # Enhanced health check (requires nginx plus or custom module)
        # health_check interval=5s fails=3 passes=2 uri=/health;
    }
    
    upstream web_backend {
        ip_hash;  # Session persistence for web
        server 85.193.95.44:3001 max_fails=3 fail_timeout=30s weight=1;
        
        keepalive 32;
        keepalive_requests 1000;
        keepalive_timeout 60s;
    }
    
    upstream bot_backend {
        least_conn;
        server 85.193.95.44:3002 max_fails=3 fail_timeout=30s weight=1;
        
        keepalive 16;
        keepalive_requests 500;
        keepalive_timeout 60s;
    }
    
    upstream adminka_backend {
        least_conn;
        server 85.193.95.44:8080 max_fails=3 fail_timeout=30s weight=1;
        
        keepalive 16;
        keepalive_requests 500;
        keepalive_timeout 60s;
    }
    
    upstream order_panel_backend {
        least_conn;
        server 85.193.95.44:8081 max_fails=3 fail_timeout=30s weight=1;
        
        keepalive 16;
        keepalive_requests 500;
        keepalive_timeout 60s;
    }
    
    # WebSocket upstream (if needed)
    upstream websocket_backend {
        least_conn;
        server 85.193.95.44:3003 max_fails=3 fail_timeout=30s weight=1;
        
        keepalive 32;
        keepalive_requests 1000;
        keepalive_timeout 60s;
    }
    
    # Default server block - Security
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        
        # Drop all requests to default server
        location / {
            return 444;
        }
        
        # Allow health checks
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
            add_header X-Server-Name $hostname always;
        }
    }
    
    # Default HTTPS server block
    server {
        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;
        server_name _;
        
        # Self-signed certificate for default server
        ssl_certificate /etc/nginx/ssl/default.crt;
        ssl_certificate_key /etc/nginx/ssl/default.key;
        
        location / {
            return 444;
        }
    }
    
    # Include modular configurations
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*.conf;
    
    # Monitoring endpoint
    server {
        listen 127.0.0.1:8080;
        server_name localhost;
        
        # Nginx status
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.16.0.0/12;
            allow 10.0.0.0/8;
            deny all;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
            add_header X-Server-Name $hostname always;
        }
        
        # Upstream health status (custom endpoint)
        location /upstream_status {
            access_log off;
            allow 127.0.0.1;
            allow 172.16.0.0/12;
            allow 10.0.0.0/8;
            deny all;
            
            default_type text/plain;
            return 200 "API: $upstream_addr\nWeb: $upstream_addr\nBot: $upstream_addr\n";
        }
    }
}