# Main website - station2290.ru
server {
    listen 80;
    listen [::]:80;
    server_name station2290.ru www.station2290.ru;
    
    # Security
    include /etc/nginx/snippets/security-headers.conf;
    
    # Certbot challenge location
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri =404;
    }
    
    # Redirect all other HTTP requests to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name station2290.ru www.station2290.ru;
    
    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/station2290.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/station2290.ru/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/station2290.ru/chain.pem;
    
    # Security Headers
    include /etc/nginx/snippets/security-headers.conf;
    include /etc/nginx/snippets/ssl-security.conf;
    
    # HSTS
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    
    # CSP for main website
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.googletagmanager.com https://www.google-analytics.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://api.station2290.ru; frame-ancestors 'none';" always;
    
    # Performance optimizations
    location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # Gzip static assets
        location ~* \.(css|js|svg)$ {
            gzip_static on;
        }
    }
    
    # Favicon
    location = /favicon.ico {
        log_not_found off;
        access_log off;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # Robots.txt
    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
        expires 1d;
    }
    
    # Sitemap
    location = /sitemap.xml {
        allow all;
        log_not_found off;
        access_log off;
        expires 1d;
    }
    
    # Main application
    location / {
        # Rate limiting
        limit_req zone=general burst=20 nodelay;
        limit_conn perip 10;
        
        # Proxy to Next.js app
        proxy_pass http://web_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffering
        proxy_buffering on;
        proxy_buffer_size 8k;
        proxy_buffers 8 8k;
        
        # Error handling
        proxy_intercept_errors on;
        error_page 502 503 504 /maintenance.html;
    }
    
    # API proxy for same-origin requests
    location /api/ {
        # Rate limiting
        limit_req zone=api burst=50 nodelay;
        
        # Proxy to API
        proxy_pass http://api_backend/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header Origin $http_origin;
        
        # CORS headers for API requests
        add_header Access-Control-Allow-Origin "https://station2290.ru" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
        add_header Access-Control-Allow-Credentials "true" always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "https://station2290.ru";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With";
            add_header Access-Control-Allow-Credentials "true";
            add_header Access-Control-Max-Age 3600;
            add_header Content-Type "text/plain charset=UTF-8";
            add_header Content-Length 0;
            return 204;
        }
    }
    
    # Health check endpoint
    location /health {
        proxy_pass http://web_backend/api/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        access_log off;
    }
    
    # Maintenance page
    location /maintenance.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    # Security - deny sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ ^/(\.user.ini|\.htaccess|\.htpasswd|\.env|config\.php)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Block common attack patterns
    location ~ (eval\(|base64_decode|gzinflate|file_get_contents|eval\(base64_decode) {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Logging
    access_log /var/log/nginx/main_access.log detailed;
    error_log /var/log/nginx/main_error.log;
}