# Bot Service - bot.station2290.ru
server {
    listen 80;
    listen [::]:80;
    server_name bot.station2290.ru;
    
    # Security
    include /etc/nginx/snippets/security-headers.conf;
    
    # Certbot challenge location
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri =404;
    }
    
    # Redirect all other HTTP requests to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name bot.station2290.ru;
    
    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/bot.station2290.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/bot.station2290.ru/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/bot.station2290.ru/chain.pem;
    
    # Security Headers
    include /etc/nginx/snippets/security-headers.conf;
    include /etc/nginx/snippets/ssl-security.conf;
    
    # HSTS
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    
    # Bot-specific CSP (very restrictive)
    add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';" always;
    
    # WhatsApp webhook endpoint with strict rate limiting
    location /webhook {
        # Very strict rate limiting for webhook
        limit_req zone=bot burst=10 nodelay;
        limit_conn perip 3;
        
        # Webhook security - only allow WhatsApp IPs
        # Update these IPs as needed based on WhatsApp documentation
        allow 31.13.64.0/19;   # Facebook/Meta IP range
        allow 157.240.0.0/16;  # Facebook/Meta IP range
        allow 173.252.64.0/19; # Facebook/Meta IP range
        allow 69.63.176.0/20;  # Facebook/Meta IP range
        allow 127.0.0.1;       # Local testing
        allow 172.20.0.0/16;   # Docker network
        deny all;
        
        # Proxy to bot service
        proxy_pass http://bot_backend/webhook;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Hub-Signature-256 $http_x_hub_signature_256;
        
        # Webhook-specific timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # No caching for webhooks
        proxy_buffering off;
        proxy_cache off;
        
        # Request size limits for webhook payloads
        client_max_body_size 10M;
        client_body_buffer_size 512k;
        
        # Log webhook requests for debugging
        access_log /var/log/nginx/bot_webhook.log detailed;
    }
    
    # Health check endpoint
    location /health {
        proxy_pass http://bot_backend/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        access_log off;
        
        # Allow from monitoring systems
        allow 127.0.0.1;
        allow 172.20.0.0/16;  # Docker network
        allow all;  # External monitoring
    }
    
    # Bot status endpoint (restricted access)
    location /status {
        # Restrict to internal networks only
        allow 127.0.0.1;
        allow 172.20.0.0/16;  # Docker network
        deny all;
        
        proxy_pass http://bot_backend/status;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # No caching for status
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }
    
    # Metrics endpoint for monitoring (Prometheus format)
    location /metrics {
        # Restrict to monitoring systems
        allow 127.0.0.1;
        allow 172.20.0.0/16;  # Docker network
        deny all;
        
        proxy_pass http://bot_backend/metrics;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        
        # Metrics-specific headers
        add_header Content-Type "text/plain; version=0.0.4; charset=utf-8";
        
        # No caching for metrics
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        
        access_log off;
    }
    
    # Audio processing endpoint (for voice messages)
    location /audio {
        # Moderate rate limiting for audio processing
        limit_req zone=bot burst=5 nodelay;
        limit_conn perip 2;
        
        # Restrict to WhatsApp and internal IPs
        allow 31.13.64.0/19;   # Facebook/Meta IP range
        allow 157.240.0.0/16;  # Facebook/Meta IP range
        allow 173.252.64.0/19; # Facebook/Meta IP range
        allow 69.63.176.0/20;  # Facebook/Meta IP range
        allow 127.0.0.1;       # Local
        allow 172.20.0.0/16;   # Docker network
        deny all;
        
        proxy_pass http://bot_backend/audio;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Audio processing timeouts (longer for processing)
        proxy_connect_timeout 60s;
        proxy_send_timeout 120s;
        proxy_read_timeout 120s;
        
        # Larger body size for audio files
        client_max_body_size 50M;
        client_body_buffer_size 1M;
        client_body_timeout 120s;
    }
    
    # TTS (Text-to-Speech) endpoint
    location /tts {
        # Moderate rate limiting for TTS
        limit_req zone=bot burst=5 nodelay;
        limit_conn perip 2;
        
        # Restrict to internal systems only
        allow 127.0.0.1;
        allow 172.20.0.0/16;  # Docker network
        deny all;
        
        proxy_pass http://bot_backend/tts;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # TTS processing timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Request size limits for TTS
        client_max_body_size 1M;
        client_body_buffer_size 128k;
    }
    
    # Admin endpoints (very restricted)
    location ~ ^/(admin|debug|test) {
        # Only allow from localhost
        allow 127.0.0.1;
        deny all;
        
        proxy_pass http://bot_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Block all other endpoints
    location / {
        # Default deny for bot service
        deny all;
        access_log off;
        log_not_found off;
        return 444;
    }
    
    # Security - deny sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ ^/(\.env|config\.|package\.json|node_modules) {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Block common attack patterns
    location ~ (eval\(|base64_decode|gzinflate|file_get_contents|eval\(base64_decode) {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Block bot scanners and crawlers
    if ($http_user_agent ~* (bot|crawler|spider|scanner)) {
        return 444;
    }
    
    # Enhanced security logging
    access_log /var/log/nginx/bot_access.log detailed;
    error_log /var/log/nginx/bot_error.log;
    
    # Log security violations
    map $status $security_violation {
        ~^4 1;
        default 0;
    }
    
    access_log /var/log/nginx/bot_security.log detailed if=$security_violation;
}