# API Service - api.station2290.ru
server {
    listen 80;
    listen [::]:80;
    server_name api.station2290.ru;
    
    # Security
    include /etc/nginx/snippets/security-headers.conf;
    
    # Certbot challenge location
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri =404;
    }
    
    # Redirect all other HTTP requests to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name api.station2290.ru;
    
    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/api.station2290.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.station2290.ru/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/api.station2290.ru/chain.pem;
    
    # Security Headers
    include /etc/nginx/snippets/security-headers.conf;
    include /etc/nginx/snippets/ssl-security.conf;
    
    # HSTS
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    
    # API-specific CSP
    add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';" always;
    
    # CORS Configuration
    set $cors_origin "";
    set $cors_cred "";
    set $cors_header "";
    set $cors_method "";
    
    # Define allowed origins
    if ($http_origin ~* ^https://(station2290\.ru|adminka\.station2290\.ru|orders\.station2290\.ru)$) {
        set $cors_origin $http_origin;
        set $cors_cred true;
        set $cors_header "Authorization, Content-Type, X-Requested-With, X-API-Key";
        set $cors_method "GET, POST, PUT, DELETE, OPTIONS, PATCH";
    }
    
    # Apply CORS headers
    add_header Access-Control-Allow-Origin $cors_origin always;
    add_header Access-Control-Allow-Credentials $cors_cred always;
    add_header Access-Control-Allow-Headers $cors_header always;
    add_header Access-Control-Allow-Methods $cors_method always;
    add_header Access-Control-Max-Age 3600 always;
    
    # Handle preflight requests
    if ($request_method = 'OPTIONS') {
        add_header Access-Control-Allow-Origin $cors_origin;
        add_header Access-Control-Allow-Credentials $cors_cred;
        add_header Access-Control-Allow-Headers $cors_header;
        add_header Access-Control-Allow-Methods $cors_method;
        add_header Access-Control-Max-Age 3600;
        add_header Content-Type "text/plain charset=UTF-8";
        add_header Content-Length 0;
        return 204;
    }
    
    # API endpoint with rate limiting
    location / {
        # Rate limiting
        limit_req zone=api burst=100 nodelay;
        limit_conn perip 20;
        
        # Proxy to API service
        proxy_pass http://api_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header Origin $http_origin;
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffering
        proxy_buffering on;
        proxy_buffer_size 8k;
        proxy_buffers 16 8k;
        proxy_busy_buffers_size 16k;
        
        # Request size limits
        client_max_body_size 50M;
        client_body_buffer_size 256k;
    }
    
    # Health check endpoint - no rate limiting
    location /health {
        proxy_pass http://api_backend/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        access_log off;
        
        # Allow from monitoring systems
        allow 127.0.0.1;
        allow 172.20.0.0/16;  # Docker network
        allow all;  # For external monitoring
    }
    
    # Authentication endpoints with stricter rate limiting
    location ~ ^/(auth|login|register|refresh-token) {
        limit_req zone=auth burst=10 nodelay;
        limit_conn perip 5;
        
        proxy_pass http://api_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Origin $http_origin;
    }
    
    # File upload endpoints with very strict rate limiting
    location ~ ^/(upload|media) {
        limit_req zone=upload burst=2 nodelay;
        limit_conn perip 2;
        
        # Increase upload limits
        client_max_body_size 100M;
        client_body_buffer_size 1M;
        client_body_timeout 120s;
        
        proxy_pass http://api_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Origin $http_origin;
        
        # Extended timeouts for uploads
        proxy_connect_timeout 120s;
        proxy_send_timeout 120s;
        proxy_read_timeout 120s;
    }
    
    # API Documentation
    location /docs {
        proxy_pass http://api_backend/docs;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Origin $http_origin;
        
        # Less strict rate limiting for docs
        limit_req zone=general burst=20 nodelay;
    }
    
    # OpenAPI spec
    location ~ ^/(openapi|swagger) {
        proxy_pass http://api_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Cache OpenAPI spec
        expires 1h;
        add_header Cache-Control "public, must-revalidate";
    }
    
    # Block sensitive endpoints
    location ~ ^/(admin|system|internal|debug|test) {
        # Only allow from specific IPs
        allow 127.0.0.1;
        allow 172.20.0.0/16;  # Docker network
        deny all;
        
        proxy_pass http://api_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Security - deny sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ ^/(\.env|config\.|database\.|\.git) {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Block common attack patterns
    location ~ (eval\(|base64_decode|gzinflate|file_get_contents|eval\(base64_decode) {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Block SQL injection attempts
    location ~ (union.*select|insert.*into|delete.*from|drop.*table) {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Logging with API-specific format
    access_log /var/log/nginx/api_access.log detailed;
    error_log /var/log/nginx/api_error.log;
}