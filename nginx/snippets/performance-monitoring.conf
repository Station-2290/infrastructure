# Performance Monitoring Configuration
# Configuration Engineer: Hive Mind Swarm
# Advanced nginx performance monitoring and metrics collection

# Performance monitoring log format
log_format performance '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       'rt=$request_time '
                       'uct="$upstream_connect_time" '
                       'uht="$upstream_header_time" '
                       'urt="$upstream_response_time" '
                       'cache="$upstream_cache_status" '
                       'host="$host" '
                       'server="$server_name" '
                       'gzip_ratio="$gzip_ratio" '
                       'ssl_protocol="$ssl_protocol" '
                       'ssl_cipher="$ssl_cipher" '
                       'connection="$connection" '
                       'connection_requests="$connection_requests"';

# JSON format for structured logging
log_format json_perf escape=json
'{'
    '"timestamp":"$time_iso8601",'
    '"remote_addr":"$remote_addr",'
    '"method":"$request_method",'
    '"uri":"$uri",'
    '"args":"$args",'
    '"status":"$status",'
    '"bytes_sent":"$bytes_sent",'
    '"body_bytes_sent":"$body_bytes_sent",'
    '"request_time":"$request_time",'
    '"upstream_connect_time":"$upstream_connect_time",'
    '"upstream_header_time":"$upstream_header_time",'
    '"upstream_response_time":"$upstream_response_time",'
    '"upstream_addr":"$upstream_addr",'
    '"upstream_status":"$upstream_status",'
    '"cache_status":"$upstream_cache_status",'
    '"host":"$host",'
    '"server_name":"$server_name",'
    '"user_agent":"$http_user_agent",'
    '"referer":"$http_referer",'
    '"gzip_ratio":"$gzip_ratio",'
    '"ssl_protocol":"$ssl_protocol",'
    '"ssl_cipher":"$ssl_cipher",'
    '"connection":"$connection",'
    '"connection_requests":"$connection_requests",'
    '"http_x_forwarded_for":"$http_x_forwarded_for"'
'}';

# Conditional logging based on status codes
map $status $log_slow_requests {
    ~^[23] 0;
    default 1;
}

map $request_time $log_slow_time {
    ~^0\.[0-4] 0;
    default 1;
}

# Access logs with performance monitoring
access_log /var/log/nginx/performance.log performance buffer=64k flush=5s;
access_log /var/log/nginx/performance.json json_perf buffer=32k flush=10s;

# Slow requests log
access_log /var/log/nginx/slow_requests.log performance buffer=16k flush=5s if=$log_slow_time;

# Error requests log  
access_log /var/log/nginx/error_requests.log performance buffer=16k flush=5s if=$log_slow_requests;

# Real-time metrics endpoint
location /metrics {
    # Restrict access to monitoring systems
    allow 127.0.0.1;
    allow 172.16.0.0/12;
    allow 10.0.0.0/8;
    deny all;
    
    access_log off;
    
    default_type text/plain;
    
    # Custom metrics response
    content_by_lua_block {
        local cjson = require "cjson"
        
        -- Get nginx statistics
        local status = {}
        status.timestamp = ngx.time()
        status.server_name = ngx.var.server_name
        status.nginx_version = ngx.var.nginx_version
        
        -- Memory usage (approximate)
        local f = io.open("/proc/meminfo", "r")
        if f then
            for line in f:lines() do
                if line:match("MemTotal") then
                    status.memory_total = tonumber(line:match("%d+"))
                elseif line:match("MemAvailable") then
                    status.memory_available = tonumber(line:match("%d+"))
                end
            end
            f:close()
        end
        
        -- Load average
        local f = io.open("/proc/loadavg", "r")
        if f then
            local loadavg = f:read("*line")
            status.load_average = loadavg:match("([%d%.]+)")
            f:close()
        end
        
        -- Connection count
        status.active_connections = ngx.var.connections_active or 0
        status.reading_connections = ngx.var.connections_reading or 0
        status.writing_connections = ngx.var.connections_writing or 0
        status.waiting_connections = ngx.var.connections_waiting or 0
        
        ngx.say(cjson.encode(status))
    }
}

# Prometheus metrics endpoint (if nginx-module-prometheus is available)
location /prometheus {
    # Restrict access
    allow 127.0.0.1;
    allow 172.16.0.0/12;
    allow 10.0.0.0/8;
    deny all;
    
    access_log off;
    prometheus_metrics;
}

# Health check with detailed information
location /health-detailed {
    access_log off;
    
    default_type application/json;
    
    # Restrict access to monitoring
    allow 127.0.0.1;
    allow 172.16.0.0/12;
    allow 10.0.0.0/8;
    deny all;
    
    content_by_lua_block {
        local cjson = require "cjson"
        
        local health = {}
        health.status = "healthy"
        health.timestamp = ngx.time()
        health.server = ngx.var.server_name
        health.version = ngx.var.nginx_version
        
        -- Check upstream health
        health.upstreams = {}
        
        -- API backend health
        local api_sock = ngx.socket.tcp()
        api_sock:settimeout(1000)
        local ok, err = api_sock:connect("85.193.95.44", 3000)
        if ok then
            health.upstreams.api = "healthy"
            api_sock:close()
        else
            health.upstreams.api = "unhealthy"
            health.status = "degraded"
        end
        
        -- Web backend health
        local web_sock = ngx.socket.tcp()
        web_sock:settimeout(1000)
        local ok, err = web_sock:connect("85.193.95.44", 3001)
        if ok then
            health.upstreams.web = "healthy"
            web_sock:close()
        else
            health.upstreams.web = "unhealthy"
            health.status = "degraded"
        end
        
        ngx.say(cjson.encode(health))
    }
}

# Performance test endpoint
location /perf-test {
    # Restrict access
    allow 127.0.0.1;
    allow 172.16.0.0/12;
    allow 10.0.0.0/8;
    deny all;
    
    access_log off;
    
    # Generate test response of specified size
    set $size $arg_size;
    if ($size = "") {
        set $size "1024";
    }
    
    default_type text/plain;
    
    content_by_lua_block {
        local size = tonumber(ngx.var.size) or 1024
        if size > 1048576 then  -- Limit to 1MB
            size = 1048576
        end
        
        local data = string.rep("x", size)
        ngx.say("Performance test data - Size: " .. size .. " bytes")
        ngx.say(data)
    }
}

# Cache status endpoint
location /cache-status {
    # Restrict access
    allow 127.0.0.1;
    allow 172.16.0.0/12;
    allow 10.0.0.0/8;
    deny all;
    
    access_log off;
    default_type application/json;
    
    content_by_lua_block {
        local cjson = require "cjson"
        
        local cache_status = {}
        cache_status.timestamp = ngx.time()
        
        -- Get cache statistics (requires custom implementation)
        cache_status.app_cache = {
            size = 0,
            hit_ratio = 0,
            entries = 0
        }
        
        cache_status.static_cache = {
            size = 0,
            hit_ratio = 0,
            entries = 0
        }
        
        ngx.say(cjson.encode(cache_status))
    }
}

# Rate limit status
location /rate-limit-status {
    # Restrict access
    allow 127.0.0.1;
    allow 172.16.0.0/12;
    allow 10.0.0.0/8;
    deny all;
    
    access_log off;
    default_type application/json;
    
    return 200 '{"rate_limits":{"api":"active","general":"active","bot":"active"}}';
}

# Request tracing (for debugging)
location /trace {
    # Restrict access
    allow 127.0.0.1;
    deny all;
    
    access_log /var/log/nginx/trace.log performance;
    
    default_type text/plain;
    
    return 200 "Request traced - Check trace.log for details";
}